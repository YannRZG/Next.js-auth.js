datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relation avec le modèle Cart
  cart          Cart?           @relation("UserCart")
  cartId        String?         @unique
  // Relation avec le modèle Order
  orders        Order[]         @relation("UserOrders")
}

 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Payment {
  id        String   @id @default(uuid())
  amount    Int
  status    String
  userId    String
  createdAt DateTime @default(now())
}


model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  cart        Cart[]   @relation("CartProducts")
  cartItems   CartItem[]
  orders      Order[]  @relation("OrderProducts") // Relation avec les commandes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cart {
  id        String    @id @default(cuid())
  userId    String    @unique
  products  Product[] @relation("CartProducts")
  user      User      @relation("UserCart", fields: [userId], references: [id]) 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  productId String
  cartId    String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Order {
  id          String    @id @default(cuid())
  userId      String    
  totalAmount Int       
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  products    Product[]  @relation("OrderProducts") // Relation avec les produits
}


